$(function() {

	// Initialize the Reveal.js library with the default config options
	// See more here https://github.com/hakimel/reveal.js#configuration

	Reveal.initialize({
		controls: false,	// Display controls in the bottom right corner
		progress: true,		// Display a presentation progress bar
		history: true,		// Every slide will change the URL
		touch: false		// Enables touch navigation on devices with touch input
	});

	// Connect to the socket

	var socket = io();

	// Variable initialization

	var form = $('form.login');
	var secretTextBox = form.find('input[type=text]');
	var presentation = $('.reveal');
	var secCdBrwsr = $('#secretCodeBrowser');
	var key = '', animationTimeout;
	var room = '';
	var device = '';

   	if(  /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) )
   	{	
   		device='controller';
   		$('.mobile').removeClass('hidden');
   	}else{
   		device='browser';
   		$('.browser').removeClass('hidden');
   	};
	// When the page is loaded it asks you for a key and sends it to the server
			if(device == 'browser'){
				socket.emit('getRoom');
				socket.on('returnRoom', function(data){
						secCdBrwsr.html(data.room);
				});
			}
			// If there is a key, send it to the server-side
			// through the socket.io channel with a 'load' event.
			// socket.emit('load', {
			// 	key: key
			// });

		form.submit(function(e){
			e.preventDefault();
			room = secretTextBox.val().trim().toLowerCase();

			// If there is a key, send it to the server-side
			// through the socket.io channel with a 'load' event.

			if(room.length) {
				socket.emit('load', {
					room: room
				});
			}

		});




	// The server will either grant or deny access, depending on the secret key

	socket.on('access', function(data){
		// Check if we have "granted" access.
		// If we do, we can continue with the presentation.

		if(data.access === "granted") {
			room = data.room;
			// Unblur everything
			presentation.removeClass('blurred');

			//Hide the content
			form.hide();
			if(device == 'controller') {
				$('.browser').hide();
			} else if(device == 'browser'){
				$('.controller').hide();
			}

			var ignore = false;

			$(window).on('hashchange', function(){

				// Notify other clients that we have navigated to a new slide
				// by sending the "slide-changed" message to socket.io

				if(ignore){
					// You will learn more about "ignore" in a bit
					return;
				}

				var hash = window.location.hash;
				socket.emit('slide-changed', {
					hash: hash,
					key: key,
					room: room
				});
			});

			socket.on('navigate', function(data){
	
				// Another device has changed its slide. Change it in this browser, too:

				window.location.hash = data.hash;

				console.log("data.hash: " + data.hash);

				//Hide the content
				if(device == 'controller') {
					$('.browser').hide();
				} else if(device == 'browser'){
					$('.controller').hide();
				}

				// The "ignore" variable stops the hash change from
				// triggering our hashchange handler above and sending
				// us into a never-ending cycle.

				ignore = true;

				setInterval(function () {
					ignore = false;
				},100);

			});

		}
		else {

			// Wrong secret key

			clearTimeout(animationTimeout);

			// Addding the "animation" class triggers the CSS keyframe
			// animation that shakes the text input.

			secretTextBox.addClass('denied animation');
			
			animationTimeout = setTimeout(function(){
				secretTextBox.removeClass('animation');
			}, 1000);

			form.show();
		}

	});

});